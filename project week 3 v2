// Include necessary libraries
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <LiquidCrystal.h>



const int trigPin = 9;
const int echoPin = 10;
long duration;
int distanceUltrasonic;

// Create an MPU6050 object
Adafruit_MPU6050 mpu;

// Define motor control pins
int in1 = 10;
int in2 = 12;
int in3 = 11;
int in4 = 13;

// Line following sensor pins
int outputA = A1;
int outputB = A0;
const int encoderPin = 2;
volatile int encoderPos = 0;
volatile bool lastA;

const int pulsePerTurn = 35;
const float wheelCircumference = 21.36;

// LCD object for display
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

int distanceFlag=1;
bool beforeRamp = true;
bool onRamp = false;

void setup() {
  // Initialize MPU6050
  Wire.begin();
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.print("Angle:");
  lcd.setCursor(0, 1);
  lcd.print("Distance:");
  pinMode(trigPin, OUTPUT);
	pinMode(echoPin, INPUT);
  
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);

  pinMode(outputA, INPUT);
  pinMode(outputB, INPUT);

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  
  delay(100);
}

void loop() {
  digitalWrite(trigPin, LOW);          //ultrasonic sensor
	delayMicroseconds(2);
	digitalWrite(trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distanceUltrasonic = duration*0.034/2;

  sensors_event_t a, g, temp;                //MPU-6050
  mpu.getEvent(&a, &g, &temp);
  float angle = atan2(a.acceleration.y, sqrt(pow(a.acceleration.x, 2) + pow(a.acceleration.z, 2))) * 180 / PI;
  lcd.setCursor(9, 0);
  lcd.print(angle);
  Serial.println(a.acceleration.y);
      
  int sensorA = analogRead(outputA);                        //IR sensors
  int sensorB = analogRead(outputB);
  float distance = ((encoderPos / pulsePerTurn) * wheelCircumference) / 2;
  lcd.setCursor(9, 1);
  lcd.print(distance);
      
  int thresholdA = 500;
  int thresholdB = 500;

  if (distanceUltrasonic <= 20){                            //line following
    motorStop();
  } else if (distanceUltrasonic > 20 || distanceUltrasonic == 0){
    
  if (beforeRamp) {
    if (!onRamp && a.acceleration.y > -3.0) {
      if (a.acceleration.y < 3.0) {
        lineFollowBefore(sensorA, sensorB, thresholdA, thresholdB);
      } else if (a.acceleration.y >= 3.0) {
        motorSpeedUp();
        onRamp = true;
      } else if (g.gyro.x < -0.5) {
        motorStop();
        delay(4000);
        motorTurn();
        delay(1000);
        onRamp = false;
      }
    }
    else if (a.acceleration.y <= -3.0) {
        motorStart();
        beforeRamp = false;
      }
  } else {
    attachInterrupt(digitalPinToInterrupt(encoderPin), updateEncoder, CHANGE);

    if (distanceFlag == 1) {
      if (distance < 90){
        lineFollow(sensorA, sensorB, thresholdA, thresholdB);
      } else {
        motorStop();
        delay(2000);
       
        distanceFlag = 0;
      }
    } else { 
      
      motorStart();
      lineFollow(sensorA, sensorB, thresholdA, thresholdB);
    }
  
  }
}



void lineFollowBefore(int sensorA, int sensorB, int thresholdA, int thresholdB) {
  if (sensorA > thresholdA) {
    leftMotorStart();
  } else if (sensorB > thresholdB) {
    rightMotorStart();
  
    // If both sensors are above their thresholds, move both motors forward
  }if (sensorA <= thresholdA && sensorB <= thresholdB) {
      motorStart();
  }
   if (sensorA >= thresholdA && sensorB >= thresholdB) {
      motorStartBefore();
    }
  
}


void lineFollow(int sensorA, int sensorB, int thresholdA, int thresholdB) {
  if (sensorA <= thresholdA && sensorB <= thresholdB) {
    motorStart();
  } else if (sensorA > thresholdA) {
    leftMotorStart();
  } else if (sensorB > thresholdB) {
    rightMotorStart();
  }

  if (sensorA >= thresholdA && sensorB >= thresholdB) {
    motorStop();
  }
}

void updateEncoder() {
  boolean currentA = digitalRead(encoderPin);

  if (lastA != currentA) {
    encoderPos++;
    // Increment distance calculation here if needed
  }

  lastA = currentA;
}

void motorStart() {
  analogWrite(in1, 70);
  analogWrite(in2, 0);
  analogWrite(in3, 70);
  analogWrite(in4, 0);
}

void motorStartBefore() {
  analogWrite(in1, 100);
  analogWrite(in2, 0);
  analogWrite(in3, 100);
  analogWrite(in4, 0);
}

void motorTurn() {
  analogWrite(in1, 150);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  analogWrite(in4, 150);
  delay(1730);
}

void motorSpeedUp() {
  analogWrite(in1, 150);
  digitalWrite(in2, LOW);
  analogWrite(in3, 150);
  digitalWrite(in4, LOW);
}

void leftMotorStart() {
  analogWrite(in1, 150);
  analogWrite(in2, 0);
  analogWrite(in3, 0);
  analogWrite(in4, 150);
}

void rightMotorStart() {
  analogWrite(in1, 0);
  analogWrite(in2, 150);
  analogWrite(in3, 150);
  analogWrite(in4, 0);
}

void motorStop() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}
